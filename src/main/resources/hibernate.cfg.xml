<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>

        <!-- START - MySQL Connection Properties -->
        <!-- MySQL - Database Specific Property Details -->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://18.222.36.80:3306/CODE_MERGERS?useSSL=false</property>
        <property name="hibernate.connection.username">remote</property>
        <property name="hibernate.connection.password">remote</property>
        <!-- Isolation level: READ COMMITTED -->
        <property name="hibernate.connection.isolation">2</property>
        <!-- END - SQL Server Connection Properties -->

        <!-- Config for Showing SQL to Console if true specified -->
        <property name="hibernate.show_sql">true</property>

        <!-- By Default this Property is set to False if you don't declare this
        Property. If it set to True than you don't need to Commit the transaction
        in the Database. Hibernate implicitly take care of committing records into the database
        after each session and if it is set to false than you need to
        commit the Transaction explicitly. e.g. session.getTransaction().commit();
        In our case, we are giving this responsibility to our entity manager, but we still need to
        set this property to false.-->
        <property name="hibernate.connection.autocommit">false</property>

        <property name="hibernate.current_session_context_class">thread</property>

        <!-- c3p0 -->
        <!-- MySQL will timeout any inactive connections after certain time. This means that our connection will be dropped
        should we not keep it active. Another way to manage this, is to be able to create new connections, by making a
        connection pool. So, whenever a connection is dropped, we just get another from active pool. This is what c3p0
        does for us. -->
        <property name="hibernate.c3p0.acquire_increment">1</property>
        <property name="hibernate.c3p0.idle_test_period">300</property>
        <property name="hibernate.c3p0.timeout">600</property>
        <property name="hibernate.c3p0.max_size">25</property>
        <property name="hibernate.c3p0.min_size">1</property>
        <property name="hibernate.c3p0.max_statement">0</property>
        <property name="hibernate.c3p0.acquireRetryAttempts">1</property>
        <property name="hibernate.c3p0.acquireRetryDelay">250</property>

        <!-- Mappings -->
        <mapping resource="hbms/user.cfg.xml"/>
        <mapping resource="hbms/exception.cfg.xml"/>
        <mapping resource="hbms/finalSolution.cfg.xml"/>
        <mapping resource="hbms/indicator.cfg.xml"/>
        <mapping resource="hbms/processMeasure.cfg.xml"/>
        <mapping resource="hbms/processMeasureParticipant.cfg.xml"/>
        <mapping resource="hbms/solution.cfg.xml"/>
        <mapping resource="hbms/vote.cfg.xml"/>
        <mapping resource="hbms/workProcess.cfg.xml"/>

    </session-factory>
</hibernate-configuration>