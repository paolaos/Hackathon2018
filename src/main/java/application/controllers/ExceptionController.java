package application.controllers;

import application.conf.HibernateConfiguration;
import application.core.exception.service.ExceptionService;
import application.core.processmeasureparticipant.service.ProcessMeasureParticipantService;
import application.core.solution.service.SolutionService;
import application.model.Exception;
import application.model.ProcessMeasureId;
import application.util.DialogMessageUtil;
import com.mysql.cj.core.util.StringUtils;
import org.hibernate.HibernateException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class ExceptionController {

    @Autowired
    ExceptionService exceptionService;

    @Autowired
    ProcessMeasureParticipantService processMeasureParticipantService;

    @Autowired
    SolutionService solutionService;

    @RequestMapping(value = "/exception/{id}")
    public String getException(@PathVariable("id") long exceptiopnId,
                           RedirectAttributes redirectAttributes,
                           Model model) {
        Exception exception = exceptionService.findById(exceptiopnId);

        if(exception == null) {
            DialogMessageUtil.addRedirectMessage(redirectAttributes, "Exception not found", "Exception is null", "error");
            return "redirect:/index";
        }
        ProcessMeasureId processMeasureId = exception.getProcessMeasure().getProcessMeasureId();

        model.addAttribute("exception", exception);
        model.addAttribute("users", processMeasureParticipantService.getParticipantsByProcessMeasure(processMeasureId));
        //model.addAttribute("solution", solutionService.);

        return "exception";
    }

    @RequestMapping(value="/exception/insert", method= RequestMethod.POST)
    @ResponseBody
    public String insertException(@ModelAttribute("manualException") Exception exception,
                                  BindingResult bindingResult,
                                  RedirectAttributes redirectAttributes){
        if (bindingResult.hasErrors()){
            return "Binding Error";
        }
        try{
            exception.setAutoGenerated(false);
            this.exceptionService.insert(exception);
        }
        catch(HibernateException e){
            return e.getMessage();
        }

        return "";
    }

    @ModelAttribute(value = "manualException")
    public Exception getManualException() {
        return new Exception();
    }
}
